#region Directives
using System;
using VTDev.Libraries.CEXEngine.Crypto.Seed;
using VTDev.Libraries.CEXEngine.Tools;
#endregion

namespace VTDev.Projects.CEX.Test.Tests.SeedTest
{
    /// <summary>
    /// XSPRsg known answer tests.
    /// <para>Test vectors generated by the C implementations:
    /// <see href="http://xorshift.di.unimi.it/xorshift128plus.c"/> and 
    /// <see href="http://xorshift.di.unimi.it/xorshift1024star.c"/></para>
    /// </summary>
    public class XSPRsgTest : ITest
    {
        #region Constants
        private const string DESCRIPTION = "XSPRsg Known Answer Test Vectors.";
        private const string FAILURE = "FAILURE! ";
        private const string SUCCESS = "SUCCESS! All XSPRsg tests have executed succesfully.";
        #endregion

        #region Events
        public event EventHandler<TestEventArgs> Progress;
        protected virtual void OnProgress(TestEventArgs e)
        {
            var handler = Progress;
            if (handler != null) handler(this, e);
        }
        #endregion

        #region Vectors
        private static readonly byte[][] _expected =
        {
            HexConverter.Decode("485e8998e6ad0300b4c77fb4a08d2200ad7644a3ca4c52f34c829c47f7e1d21c"),
			HexConverter.Decode("bd749478c5540000fb500c28af54010029336291bc14bc6286a094e8a58031f8"),
			HexConverter.Decode("1ff967b4312e56c0d4f6afadab6f2b096afbbf716c7da30631e2b74bc8ff34d5"),
            HexConverter.Decode("ebb8179801eeedad9bdd3750cb5b93bd0000c0473c64cf5a24d2df9b96c40248"),
        };

        private ulong[][] _input;
        #endregion

        #region Properties
        /// <summary>
        /// Get: Test Description
        /// </summary>
        public string Description { get { return DESCRIPTION; } }
        #endregion

        #region Public Methods
        public XSPRsgTest()
        {
            _input = new ulong[4][];
            _input[0] = new ulong[] { 123456789, 987654321 };
            _input[1] = new ulong[] { 11111111, 22222222 };
            _input[2] = new ulong[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
            _input[3] = new ulong[] { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
        }

        /// <summary>
        /// Start the tests
        /// </summary>
        public string Run()
        {
            try
            {
                VectorTest(_input[0], _expected[0]);
                VectorTest(_input[1], _expected[1]);
                VectorTest(_input[2], _expected[2]);
                VectorTest(_input[3], _expected[3]);
                OnProgress(new TestEventArgs("Passed XorShift+ vector tests.."));

                return SUCCESS;
            }
            catch (Exception Ex)
            {
                string message = Ex.Message == null ? "" : Ex.Message;
                throw new Exception(FAILURE + message);
            }
        }
        #endregion

        #region Private
        private void VectorTest(ulong[] Input, byte[] Expected)
        {
            byte[] rand = new byte[32];
			XSPRsg gen = new XSPRsg(Input);
			gen.GetBytes(rand);

            if (Evaluate.AreEqual(rand, Expected) == false)
                throw new Exception("XorShift: Values are not equal!");
        }
        #endregion
    }
}